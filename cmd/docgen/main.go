package main

import (
	"log"
	"os"
	"strings"

	"github.com/spf13/cobra"
	"github.com/spf13/cobra/doc"

	"synnergy/cli"
)

func main() {
	// Output file for combined CLI documentation.
	out := "docs/guides/cli_guide.md"
	if err := os.MkdirAll("docs/guides", 0o755); err != nil {
		log.Fatalf("create guides dir: %v", err)
	}
	f, err := os.Create(out)
	if err != nil {
		log.Fatalf("create doc file: %v", err)
	}
	defer f.Close()

	root := cli.RootCmd()
	root.DisableAutoGenTag = true

	// Add header comment.
	if _, err := f.WriteString("<!-- Code generated by cmd/docgen; DO NOT EDIT. -->\n\n"); err != nil {
		log.Fatalf("write header: %v", err)
	}

	// Custom link handler rewrites cross references to anchors in the single file.
	linkHandler := func(name string) string {
		base := strings.TrimSuffix(name, ".md")
		return "#" + strings.ReplaceAll(base, "_", "-")
	}

	var write func(cmd *cobra.Command)
	write = func(cmd *cobra.Command) {
		if err := doc.GenMarkdownCustom(cmd, f, linkHandler); err != nil {
			log.Fatalf("gen markdown for %s: %v", cmd.Name(), err)
		}
		for _, c := range cmd.Commands() {
			if !c.IsAvailableCommand() || c.Hidden {
				continue
			}
			if _, err := f.WriteString("\n"); err != nil {
				log.Fatalf("write newline: %v", err)
			}
			write(c)
		}
	}

	write(root)
}
